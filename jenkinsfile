pipeline {
    agent any

    environment {
        FLUTTER_HOME = '/opt/flutter'
        ANDROID_HOME = '/opt/android-sdk'
        PATH = "$FLUTTER_HOME/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH"
        APP_BUNDLE_PATH = 'build/app/outputs/bundle/release/app-release.aab'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AshwinRamana/demo_project.git'
            }
        }

        stage('Flutter Environment Check') {
            steps {
                sh 'flutter doctor -v'
            }
        }

        stage('Dependencies') {
            steps {
                sh 'flutter pub get'
            }
        }

        stage('Update Version') {
            steps {
                script {
                    def pubspecFile = readFile 'pubspec.yaml'
                    def newVersion = "1.0.${env.BUILD_NUMBER}"
                    def pattern = "version: ([0-9]+\\.[0-9]+\\.)([0-9]+)(\\+[0-9]+)?"
                    def replacement = "version: ${newVersion}+${env.BUILD_NUMBER}"
                    pubspecFile = pubspecFile.replaceAll(pattern, replacement)
                    writeFile file: 'pubspec.yaml', text: pubspecFile
                    sh 'grep "version:" pubspec.yaml'
                }
            }
        }

        stage('Build Android App Bundle') {
            steps {
                sh 'flutter build appbundle --release'
                sh 'ls -la build/app/outputs/bundle/release/'
            }
        }

        stage('Upload to Play Store') {
            steps {
                script {
                    // Use a direct command with the Google Play Android Publisher tool
                    // or use a direct API call with the JSON file path
                    sh '''
                        echo "Using direct path to JSON key file"
                        
                        # Example using the Google Play Android Publisher CLI tool
                        # Replace this with the actual command for your environment
                        
                        export GOOGLE_APPLICATION_CREDENTIALS=/home/ecbeeuser159/jenkins_keys/play-store-key.json
                        
                        # Use bundletool or the Google Play Developer API directly
                        # For example, using a wrapper script:
                        
                        bash -c '
                            python3 <<EOF
import os
import google.auth
import googleapiclient.discovery
from googleapiclient.http import MediaFileUpload

# Get credentials from environment variable
credentials, _ = google.auth.default()

# Build the service
service = googleapiclient.discovery.build("androidpublisher", "v3", credentials=credentials)

# Upload the app bundle
package_name = "com.example.demo_project"  # Replace with your package name
app_bundle_path = "${APP_BUNDLE_PATH}"

edit_request = service.edits().insert(body={}, packageName=package_name)
edit_response = edit_request.execute()
edit_id = edit_response["id"]

# Upload the bundle
with open(app_bundle_path, "rb") as bundle:
    upload_request = service.edits().bundles().upload(
        editId=edit_id,
        packageName=package_name,
        media_body=MediaFileUpload(app_bundle_path, mimetype="application/octet-stream")
    )
    upload_response = upload_request.execute()

# Assign to track
track_request = service.edits().tracks().update(
    editId=edit_id,
    packageName=package_name,
    track="internal",
    body={
        "track": "internal",
        "releases": [{
            "versionCodes": [upload_response["versionCode"]],
            "status": "completed",
            "userFraction": 1.0
        }]
    }
)
track_response = track_request.execute()

# Commit changes
commit_request = service.edits().commit(editId=edit_id, packageName=package_name)
commit_response = commit_request.execute()

print("App bundle uploaded and assigned to internal track")
EOF
                        '
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed!'
        }
        always {
            archiveArtifacts artifacts: "${APP_BUNDLE_PATH}", allowEmptyArchive: true
            cleanWs()
        }
    }
}