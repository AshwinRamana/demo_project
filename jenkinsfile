pipeline {
    agent any

    environment {
        FLUTTER_HOME = '/opt/flutter'
        ANDROID_HOME = '/opt/android-sdk'
        PATH = "$FLUTTER_HOME/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH"
        APP_BUNDLE_PATH = 'build/app/outputs/bundle/release/app-release.aab'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AshwinRamana/demo_project.git'
            }
        }

        stage('Flutter Build') {
            steps {
                sh 'flutter pub get'
                
                // Update version number
                script {
                    def pubspecFile = readFile 'pubspec.yaml'
                    def newVersion = "1.0.${env.BUILD_NUMBER}"
                    pubspecFile = pubspecFile.replaceAll("version: ([0-9]+\\.[0-9]+\\.)([0-9]+)(\\+[0-9]+)?", "version: ${newVersion}+${env.BUILD_NUMBER}")
                    writeFile file: 'pubspec.yaml', text: pubspecFile
                }
                
                // Build app bundle
                sh 'flutter build appbundle --release'
            }
        }

        stage('Upload to Play Store') {
            steps {
                withCredentials([file(credentialsId: 'google-play-credentials', variable: 'GOOGLE_PLAY_KEY')]) {
                    androidApkUpload(
                        googleCredentialsId: 'google-play-credentials',
                        apkFilesPattern: "${APP_BUNDLE_PATH}",
                        trackName: 'internal',  // Can be 'internal', 'alpha', 'beta', or 'production'
                        rolloutPercentage: '100',
                        deobfuscationFilesPattern: '**/mapping.txt'  // Optional, if you have ProGuard enabled
                    )
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "${APP_BUNDLE_PATH}", allowEmptyArchive: true
            cleanWs()
        }
    }
}