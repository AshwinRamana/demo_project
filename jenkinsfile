pipeline {
    agent any

    environment {
        FLUTTER_HOME = '/opt/flutter'
        ANDROID_HOME = '/opt/android-sdk'
        PATH = "$FLUTTER_HOME/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH"
        APP_BUNDLE_PATH = 'build/app/outputs/bundle/release/app-release.aab'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/AshwinRamana/demo_project.git'
            }
        }

        stage('Flutter Environment Check') {
            steps {
                sh 'flutter doctor -v'
            }
        }

        stage('Dependencies') {
            steps {
                sh 'flutter pub get'
            }
        }

        stage('Update Version') {
            steps {
                script {
                    def pubspecFile = readFile 'pubspec.yaml'
                    def newVersion = "1.0.${env.BUILD_NUMBER}"
                    def pattern = "version: ([0-9]+\\.[0-9]+\\.)([0-9]+)(\\+[0-9]+)?"
                    def replacement = "version: ${newVersion}+${env.BUILD_NUMBER}"
                    pubspecFile = pubspecFile.replaceAll(pattern, replacement)
                    writeFile file: 'pubspec.yaml', text: pubspecFile
                    sh 'grep "version:" pubspec.yaml'
                }
            }
        }

        stage('Build Android App Bundle') {
            steps {
                sh 'flutter build appbundle --release'
                sh 'ls -la build/app/outputs/bundle/release/'
            }
        }

        stage('Upload to Play Store') {
            steps {
                script {
                    // Copy the file to a temporary location with a known name
                    sh "cp /home/ecbeeuser159/jenkins_keys/play-store-key.json ./play-store-key.json"
                    
                    // Register this temporary file as a credential for this build only
                    withCredentials([
                        string(credentialsId: 'temp_play_store_key', variable: 'DUMMY', 
                              fileBinding: [fileContent: readFile('./play-store-key.json')])
                    ]) {
                        androidApkUpload(
                            googleCredentialsId: 'temp_play_store_key',
                            apkFilesPattern: "${APP_BUNDLE_PATH}",
                            trackName: 'internal',
                            rolloutPercentage: '100'
                        )
                    }
                    
                    // Clean up the temporary file
                    sh "rm ./play-store-key.json"
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed!'
        }
        always {
            archiveArtifacts artifacts: "${APP_BUNDLE_PATH}", allowEmptyArchive: true
            cleanWs()
        }
    }
}